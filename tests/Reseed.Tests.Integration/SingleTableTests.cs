using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using NUnit.Framework;
using Reseed.Configuration;
using Reseed.Tests.Integration.Core;

namespace Reseed.Tests.Integration
{
	[Parallelizable(ParallelScope.All)]
	[TestFixtureSource(typeof(SeedModes), nameof(SeedModes.Every))]
	public sealed class SingleTableTests: TestFixtureBase
	{
		private readonly SeedMode mode;

		public SingleTableTests(SeedMode mode)
		{
			this.mode = mode;
		}

		[Test]
		// Should insert single table data, when there are entities
		// and every column is provided 
		public Task ShouldInsert_AllColumns() => 
			TestUserTableSeed(6);

		[Test]
		// Should insert single table data, when there are entities
		// and every column apart from Id is provided.
		// Missing Identity values should be autogenerated.
		public Task ShouldInsert_IdentityMissing() => 
			TestUserTableSeed(6);

		[Test]
		// Should insert single table data, when there are entities
		// and every column is provided, but some of the entities don't have Id.
		// Missing Identity values should be autogenerated.
		public Task ShouldInsert_IdentityMixed() => 
			TestUserTableSeed(6);

		private async Task TestUserTableSeed(int userCount)
		{
			await Conventional.AssertSeedSucceeds(
				this,
				this.mode,
				async sql => Assert.AreEqual(userCount, await GetUsersCount(sql)),
				async sql => Assert.AreEqual(0, await GetUsersCount(sql)));

			static Task<int> GetUsersCount(SqlEngine sqlEngine) =>
				sqlEngine.ExecuteScalarAsync<int>("SELECT COUNT(1) FROM [dbo].[User]");
		}
	}
}
